(* ::Package:: *)

(* ::Input:: *)
(*WeylGroup[n_,type_:A,inrootbasis_:False] := Module[{permmatrices,cbroot2coord,cbcoord2root,cartanmatrix},*)
(*If[type=!=A, Return[Null];];*)
(*If[n==1, Return[{{{1}},{{-1}}}];];*)
(*permmatrices = Table[IdentityMatrix[n+1][[perm]],{perm ,Permutations[Range[n+1]]}];*)
(*cbroot2coord = Join[IdentityMatrix[n],{ConstantArray[0,n]}]-Join[{ConstantArray[0,n]},IdentityMatrix[n]];*)
(*cbcoord2root = LowerTriangularize[ConstantArray[1,{n,n+1}]];*)
(*cartanmatrix = DiagonalMatrix[ConstantArray[2,n]] + DiagonalMatrix[ConstantArray[-1,n-1],1] + DiagonalMatrix[ConstantArray[-1,n-1], -1];*)
(*If[inrootbasis,*)
(*Return[Table[cbcoord2root.P.cbroot2coord, {P,permmatrices}]];,*)
(*Return[Table[Inverse[cartanmatrix].cbcoord2root.P.cbroot2coord.cartanmatrix, {P,permmatrices}]];*)
(*];*)
(*];*)
(**)
(*ApplyWeylGroup[weights_,weylgroup_] := DeleteDuplicates[Flatten[Table[m.w,{w,weights},{m,weylgroup}],1]];*)
(**)
(*DominantWeights[highestweight_,cartanmatrix_] := Module[{cbhighestweight,cbdomweights},*)
(*(* Change to root coordinates - should this be transpose? *)*)
(*cbhighestweight=Inverse[cartanmatrix].highestweight;*)
(*cbdomweights=Flatten[CoordinateBoundsArray[Table[{w,0},{w,cbhighestweight}],-1],1];*)
(*(* Change back to weight coordinates, remove non-dominant *)*)
(*Return[DeleteCases[Transpose[cartanmatrix.Transpose[cbdomweights]], (x_ /;Min[x[[1]],x[[2]]]<0)]];*)
(*];*)
(**)
(*Irrep[highestweight_] := Module[{minw, maxw, hexagonshells,triangleshells},*)
(*minw=Min[highestweight];*)
(*maxw=Max[highestweight];*)
(*hexagonshells = Association[Table[ShellWeights[highestweight-i,i+1], {i,0,minw-1}]];*)
(*triangleshells = Association[Table[ShellWeights[Max[#,0]&/@(highestweight-i),minw+1], {i,minw,maxw,3}]];*)
(*Return [Join[hexagonshells,triangleshells]];*)
(*];*)
(**)
(*(* Function which takes a 'corner' of a hexagon/triangle and produces all the weights in the hexagon/triangle*)
(*All weights are in the basis of the fundamental dominant weights*)
(*The roots are in the basis of the simple roots *)*)
(*ShellWeights[dominantweight_, dim_]:=Module[{weights,nextweight},*)
(*(*First deal with trivial rep*)*)
(*If[dominantweight=={0,0},Return[<|{0,0}->dim|>];];*)
(**)
(*weights=<|dominantweight->dim|>;*)
(*(* Gets edge in alpha direction (top of hexagon) *)*)
(*weights = Join[weights,Edge[dominantweight,dim,{1,0}]];*)
(*nextweight=Last[Keys[weights]];*)
(*(* Gets edge in alpha+beta direction, etc. *)*)
(*weights=Join[weights,Edge[nextweight,dim,{1,1}]];*)
(*nextweight=Last[Keys[weights]];*)
(*weights=Join[weights,Edge[nextweight,dim,{0,1}]];*)
(*nextweight=Last[Keys[weights]];*)
(*weights=Join[weights,Edge[nextweight,dim,{1,0}]];*)
(*nextweight=Last[Keys[weights]];*)
(*weights=Join[weights,Edge[nextweight,dim,{1,1}]];*)
(*nextweight=Last[Keys[weights]];*)
(*weights=Join[weights,Edge[nextweight,dim,{0,1}]];*)
(**)
(*Return[weights];*)
(*];*)
(**)
(*(* Takes extremal weight of sl_2 module corresponding to root, gets all weights from that rep *)*)
(*Edge[weight_, dim_,root_]:=Module[{n,cartanmatrix},*)
(*n=Dot[weight,root];*)
(*(* Used to change basis from simple roots to fundamental dominant weight *)*)
(*cartanmatrix={{2,-1},{-1,2}};*)
(*Return[If[n<0,*)
(*Association[Table[(weight+x*(cartanmatrix.root))->dim,{x,1,-n}]],*)
(*Association[Table[(weight-x*(cartanmatrix.root))->dim,{x,1,n}]]]*)
(*];*)
(*];*)
(**)
(*(* Plots a given collection of weights in Euclidean coordinates *)*)
(*PlotWeights[weights_]:=Module[{cobmatrix},*)
(*cobmatrix={{Sqrt[3]/2,0},{1/2,1}};*)
(*Return[*)
(*(*ListPlot[Transpose[cobmatrix.Transpose[Keys[weights]]],*)
(*PlotStyle->PointSize[#]&/@(Values[weights]*0.01)]*)*)
(*BubbleChart[Table[Append[cobmatrix.pt,weights[pt]],{pt,Keys[weights]}], Frame->False,Axes->True,AxesOrigin->{0,0}AspectRatio->1]*)
(*];*)
(*];*)


(* ::Input:: *)
(*(* Examples *)*)


(* ::Input:: *)
(*cartanmatrix={{2,-1},{-1,2}};*)


(* ::Input:: *)
(*DominantWeights[{3,1},cartanmatrix]*)


(* ::Input:: *)
(*(* Defining Rep *)*)
(*defRep=Irrep[{1,0}]*)


(* ::Input:: *)
(*(* Ad Rep Outer Shell *)*)
(*adRep=Irrep[{1,1}]*)


(* ::Input:: *)
(*PlotWeights[defRep]*)


(* ::Input:: *)
(*PlotWeights[adRep]*)


(* ::Input:: *)
(*PlotWeights[Irrep[{1,5}]]*)
